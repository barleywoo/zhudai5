package com.apply.credit.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.springframework.jdbc.core.BeanPropertyRowMapper;

public class DbUtil {

	// 读取数据
	public static List<List<Object>> readData(String sql) throws SQLException {
		List<List<Object>> data = new ArrayList<List<Object>>();

		createConnect();
		Statement ps = null;
		try {
			ps = conn.createStatement();
			ResultSet rs = ps.executeQuery(sql);
			while (rs.next()) {
				List<Object> list = new ArrayList<Object>();
				for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
					list.add(rs.getObject(i));
				}
				data.add(list);
			}

			rs.close();

			return data;
		} finally {
			if (ps != null) {
				ps.close();
			}
		}
	}
	
	/**
	 * 执行语句
	 * 
	 * @param sql 语句
	 * @param clazz 返回对象
	 * @return
	 * @throws SQLException 
	 */
	public static <T> List<T> execute(String sql, Class<T> clazz) throws SQLException {
		List<T> datas = new ArrayList<T>();
		
		BeanPropertyRowMapper<T> rowMapper = new BeanPropertyRowMapper<T>(clazz);
		
		createConnect();
		Statement ps = null;
		try {
			ps = conn.createStatement();
			ResultSet rs = ps.executeQuery(sql);
			int num = 0;
			while(rs.next()) {
				num++;
				
				datas.add(rowMapper.mapRow(rs, num));
			}

			rs.close();

			return datas;
		} finally {
			if (ps != null) {
				ps.close();
			}
		}
	}
	
	/**
	 * 执行语句
	 * 
	 * @param sql 语句
	 * @param clazz 返回对象
	 * @return
	 * @throws SQLException 
	 */
	public static <T> T executeSingle(String sql, Class<T> clazz) throws SQLException {
		List<T> datas = new ArrayList<T>();
		
		BeanPropertyRowMapper<T> rowMapper = new BeanPropertyRowMapper<T>(clazz);
		
		createConnect();
		Statement ps = null;
		try {
			ps = conn.createStatement();
			ResultSet rs = ps.executeQuery(sql);
			int num = 0;
			while(rs.next()) {
				num++;
				
				datas.add(rowMapper.mapRow(rs, num));
			}

			rs.close();

			return datas.get(0);
		} finally {
			if (ps != null) {
				ps.close();
			}
		}
	}

	public static List<Object> readDataLine(String sql) throws SQLException {
		List<Object> data = new ArrayList<Object>();

		createConnect();
		Statement ps = null;
		try {
			ps = conn.createStatement();
			ResultSet rs = ps.executeQuery(sql);
			if (rs.next()) {
				for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
					data.add(rs.getObject(i));
				}
			}

			rs.close();

			return data;
		} finally {
			if (ps != null) {
				ps.close();
			}
		}
	}

	public static Integer readDataSingle(String sql) throws SQLException {
		Integer i = 0;
		createConnect();
		Statement ps = null;
		try {
			ps = conn.createStatement();
			ResultSet rs = ps.executeQuery(sql);
			while (rs.next()) {
				i = rs.getInt(1);
			}

			rs.close();

			return i;
		} finally {
			if (ps != null) {
				ps.close();
			}
		}
	}

	public static Integer readDataUpdate(String sql) throws SQLException {
		Integer i = 0;
		createConnect();
		Statement ps = null;
		try {
			ps = conn.createStatement();
			i = ps.executeUpdate(sql);

			return i;
		} finally {
			conn.commit();
			if (ps != null) {
				ps.close();
			}
		}
	}

	static Connection conn;
	private static String url = "jdbc:sqlite:%s/myDB.db"; //;user=app;password=123456

	public static void createConnect() {
		if (conn != null) {
			return;
		}
		try {
			// 加载所需要的类
			Class.forName("org.sqlite.JDBC");
			String path = DbUtil.class.getResource("/data").getPath();
			url = String.format(url, path.substring(1, path.length() - 1));
			// 创建连接
			conn = DriverManager.getConnection(url);

			// 开启事务
			conn.setAutoCommit(false);
			System.out.println("数据库连接成功，并且开始事务！url=" + url);
		} catch (Exception e) {
			System.out.println("数据库连接失败！");
			e.printStackTrace();
		}
	}

	public static void closeConn() {
		if (conn != null) {
			try {
				conn.close();
			} catch (Exception e) {
				try {
					conn.close();
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
			}
			
			conn = null;
		}
	}
	
	public static Connection getConn(){
		return conn;
	}
	
	public static void main(String[] args) {
		try {
			// 创建连接
			//readDataUpdate("create table tb_apply(id int generated by default as identity primary key,name varchar(255),mobile varchar(255),sex varchar(255),city varchar(255),money varchar(255),source varchar(255),weburl varchar(255),ismove varchar(255),mid varchar(255),thirdUid varchar(255),isdecode varchar(255))");
			//readData("select * from tb_apply");
			System.out.println("123456".substring(0, 5));
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// 关闭连接
			closeConn();
		}
	}
}
